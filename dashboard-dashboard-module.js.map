{"version":3,"sources":["webpack:///./node_modules/@angular/common/fesm5/http.js","webpack:///./src/app/dashboard/all-student/all-student.component.css","webpack:///./src/app/dashboard/all-student/all-student.component.html","webpack:///./src/app/dashboard/all-student/all-student.component.ts","webpack:///./src/app/dashboard/common/dashboard-api.service.ts","webpack:///./src/app/dashboard/dashboard-routing.module.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/dashboard/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard/dashboard.component.ts","webpack:///./src/app/dashboard/fail-student/fail-student.component.css","webpack:///./src/app/dashboard/fail-student/fail-student.component.html","webpack:///./src/app/dashboard/fail-student/fail-student.component.ts","webpack:///./src/app/dashboard/pass-student/pass-student.component.css","webpack:///./src/app/dashboard/pass-student/pass-student.component.html","webpack:///./src/app/dashboard/pass-student/pass-student.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEqF;AACe;AAC9D;AACkB;AACM;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,kCAAkC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,yCAAyC,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mEAAmE,EAAE;AAC1G;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8BAA8B;AAC7F,mEAAmE,gCAAgC;AACnG,+DAA+D,gCAAgC;AAC/F,mEAAmE,kCAAkC;AACrG;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAM;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,oBAAoB,sCAAsC,EAAE;AACvH;AACA;AACA;AACA,wDAAwD,oBAAoB,sCAAsC,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA,2DAA2D,oBAAoB,sCAAsC,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,sDAAsD,EAAE;AACpH;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,yDAAyD,EAAE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbsDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mDAAmD,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA,kDAAkD,mDAAmD,EAAE;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB;AAC5D,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wBAAwB;AAC3D,6DAA6D,4BAA4B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,kBAAkB,eAAe,GAAG,GAAG,EAAE;AACzC,uCAAuC,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,6BAA6B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAsB,+CAAE,WAAW,gEAAS,iBAAiB,kCAAkC,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAM,mBAAmB,sCAAsC,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yCAAyC,0DAAG;AAC5C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yCAAyC,0DAAG,iBAAiB,iBAAiB,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA,iBAAiB,wDAAU;AAC3B,QAAQ,gEAAU;AAClB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wDAAU;AAChC,QAAQ,gEAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,+CAA+C;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,wDAAU;AACnC,QAAQ,gEAAU;AAClB,QAAQ,qDAAO,IAAI,4DAAM,CAAC,wDAAQ;AAClC,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAU;AACjC,QAAQ,gEAAU;AAClB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+BAA+B;AAC7E,iBAAiB,wDAAU;AAC3B,QAAQ,gEAAU;AAClB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qDAAqD,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qEAAqE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB,wDAAU;AAC/B,QAAQ,gEAAU;AAClB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAc;AACzC,2BAA2B,4DAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yEAAiB;AAC9C;AACA;AACA;AACA;AACA,8BAA8B,wDAAU;AACxC,QAAQ,gEAAU;AAClB,QAAQ,qDAAO,IAAI,4DAAM,CAAC,wDAAQ,IAAI,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACnE,QAAQ,qDAAO,IAAI,4DAAM;AACzB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA,0BAA0B,wDAAU;AACpC,QAAQ,gEAAU;AAClB,QAAQ,qDAAO,IAAI,4DAAM;AACzB,QAAQ,wDAAU;AAClB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,sDAAsD,EAAE;AACxI;AACA;AACA;AACA,8BAA8B,wDAAU;AACxC,QAAQ,gEAAU;AAClB,QAAQ,wDAAU,oCAAoC,sDAAQ;AAC9D;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,sCAAsC,0DAA0D;AAChG,sCAAsC,0DAA0D;AAChG;AACA;AACA;AACA;AACA,oDAAoD,wDAAU;AAC9D,QAAQ,8DAAQ;AAChB;AACA;AACA,iBAAiB,4EAA4E;AAC7F,iBAAiB,qEAAqE;AACtF,iBAAiB,oDAA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","file":"dashboard-dashboard-module.js","sourcesContent":["/**\n * @license Angular v7.2.15\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __spread, __read, __extends, __decorate, __metadata, __param } from 'tslib';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHeaders` class represents the header configuration options for an HTTP request.\n * Instances should be assumed immutable with lazy parsing.\n *\n * @publicApi\n */\nvar HttpHeaders = /** @class */ (function () {\n    /**  Constructs a new HTTP header object with the given values.*/\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var index = line.indexOf(':');\n                    if (index > 0) {\n                        var name_1 = line.slice(0, index);\n                        var key = name_1.toLowerCase();\n                        var value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            _this.headers.get(key).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var values = headers[name];\n                    var key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a header by a given name.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns Whether the header exits.\n     */\n    HttpHeaders.prototype.has = function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns the first header value that matches a given name.\n     *\n     * @param name The header name to retrieve.\n     *\n     * @returns A string if the header exists, null otherwise\n     */\n    HttpHeaders.prototype.get = function (name) {\n        this.init();\n        var values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    HttpHeaders.prototype.keys = function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns a list of header values for a given header name.\n     *\n     * @param name The header name from which to retrieve the values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    HttpHeaders.prototype.getAll = function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * Appends a new header value to the existing set of\n     * header values.\n     *\n     * @param name The header name for which to append the values.\n     *\n     * @returns A clone of the HTTP header object with the value appended.\n     */\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * Sets a header value for a given name. If the header name already exists,\n     * its value is replaced with the given value.\n     *\n     * @param name The header name.\n     * @param value Provides the value to set or overide for a given name.\n     *\n     * @returns A clone of the HTTP header object with the newly set header value.\n     */\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * Deletes all header values for a given name.\n     *\n     * @param name The header name.\n     * @param value The header values to delete for a given name.\n     *\n     * @returns A clone of the HTTP header object.\n     */\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, other.headers.get(key));\n            _this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    };\n    HttpHeaders.prototype.clone = function (update) {\n        var clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, __spread(value));\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var toDelete_1 = update.value;\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    HttpHeaders.prototype.forEach = function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A class that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values. If you pass URL query parameters\n * without encoding, the query parameters can get misinterpreted at the receiving end.\n * Use the `HttpParameterCodec` class to encode and decode the query-string values.\n *\n * @publicApi\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    HttpUrlEncodingCodec.prototype.encodeKey = function (key) { return standardEncoding(key); };\n    HttpUrlEncodingCodec.prototype.encodeValue = function (value) { return standardEncoding(value); };\n    HttpUrlEncodingCodec.prototype.decodeKey = function (key) { return decodeURIComponent(key); };\n    HttpUrlEncodingCodec.prototype.decodeValue = function (value) { return decodeURIComponent(value); };\n    return HttpUrlEncodingCodec;\n}());\nfunction paramParser(rawParams, codec) {\n    var map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = __read(eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n            var list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * @publicApi\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var value = options.fromObject[key];\n                _this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    HttpParams.prototype.has = function (param) {\n        this.init();\n        return this.map.has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.get = function (param) {\n        this.init();\n        var res = this.map.get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    HttpParams.prototype.getAll = function (param) {\n        this.init();\n        return this.map.get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    HttpParams.prototype.keys = function () {\n        this.init();\n        return Array.from(this.map.keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    HttpParams.prototype.toString = function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var eKey = _this.encoder.encodeKey(key);\n            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    HttpParams.prototype.clone = function (update) {\n        var clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });\n            this.updates.forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        _this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var base_1 = _this.map.get(update.param) || [];\n                            var idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                _this.map.set(update.param, base_1);\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            _this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    HttpRequest.prototype.serializeBody = function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    HttpRequest.prototype.detectContentTypeHeader = function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var method = update.method || this.method;\n        var url = update.url || this.url;\n        var responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var headers = update.headers || this.headers;\n        var params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    HttpHeaderResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n *\n * @see [HTTP Guide](guide/http)\n *\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n* ```\n *\n * @publicApi\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    HttpClient.prototype.request = function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            var headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map(function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map(function (res) { return res.body; }));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    HttpClient.prototype.delete = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, options);\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    HttpClient.prototype.get = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, options);\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    HttpClient.prototype.head = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, options);\n    };\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    HttpClient.prototype.jsonp = function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    HttpClient.prototype.options = function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, options);\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    HttpClient.prototype.patch = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    HttpClient.prototype.post = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    HttpClient.prototype.put = function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [HttpHandler])\n    ], HttpClient);\n    return HttpClient;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * @publicApi\n */\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor = __decorate([\n        Injectable()\n    ], NoopInterceptor);\n    return NoopInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * @publicApi\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    JsonpClientBackend.prototype.nextCallback = function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    JsonpClientBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var callback = _this.nextCallback();\n            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var body = null;\n            // Whether the response callback has been called.\n            var finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend = __decorate([\n        Injectable(),\n        __param(1, Inject(DOCUMENT)),\n        __metadata(\"design:paramtypes\", [JsonpCallbackContext, Object])\n    ], JsonpClientBackend);\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @publicApi\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [JsonpClientBackend])\n    ], JsonpInterceptor);\n    return JsonpInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n *\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [])\n    ], BrowserXhr);\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * @publicApi\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    HttpXhrBackend.prototype.handle = function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                var statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error: error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function (error) {\n                var url = partialFromXhr().url;\n                var res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [XhrFactory])\n    ], HttpXhrBackend);\n    return HttpXhrBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor = __decorate([\n        Injectable(),\n        __param(0, Inject(DOCUMENT)), __param(1, Inject(PLATFORM_ID)),\n        __param(2, Inject(XSRF_COOKIE_NAME)),\n        __metadata(\"design:paramtypes\", [Object, String, String])\n    ], HttpXsrfCookieExtractor);\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor = __decorate([\n        Injectable(),\n        __param(1, Inject(XSRF_HEADER_NAME)),\n        __metadata(\"design:paramtypes\", [HttpXsrfTokenExtractor, String])\n    ], HttpXsrfInterceptor);\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    HttpInterceptingHandler.prototype.handle = function (req) {\n        if (this.chain === null) {\n            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [HttpBackend, Injector])\n    ], HttpInterceptingHandler);\n    return HttpInterceptingHandler;\n}());\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    HttpClientXsrfModule_1 = HttpClientXsrfModule;\n    /**\n     * Disable the default XSRF protection.\n     */\n    HttpClientXsrfModule.disable = function () {\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    HttpClientXsrfModule.withOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule_1,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    var HttpClientXsrfModule_1;\n    HttpClientXsrfModule = HttpClientXsrfModule_1 = __decorate([\n        NgModule({\n            providers: [\n                HttpXsrfInterceptor,\n                { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n            ],\n        })\n    ], HttpClientXsrfModule);\n    return HttpClientXsrfModule;\n}());\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule = __decorate([\n        NgModule({\n            /**\n             * Optional configuration for XSRF protection.\n             */\n            imports: [\n                HttpClientXsrfModule.withOptions({\n                    cookieName: 'XSRF-TOKEN',\n                    headerName: 'X-XSRF-TOKEN',\n                }),\n            ],\n            /**\n             * Configures the [dependency injector](guide/glossary#injector) where it is imported\n             * with supporting services for HTTP communications.\n             */\n            providers: [\n                HttpClient,\n                { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                HttpXhrBackend,\n                { provide: HttpBackend, useExisting: HttpXhrBackend },\n                BrowserXhr,\n                { provide: XhrFactory, useExisting: BrowserXhr },\n            ],\n        })\n    ], HttpClientModule);\n    return HttpClientModule;\n}());\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule = __decorate([\n        NgModule({\n            providers: [\n                JsonpClientBackend,\n                { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n            ],\n        })\n    ], HttpClientJsonpModule);\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n//# sourceMappingURL=http.js.map\n","module.exports = \".table-container{\\n    max-height: 300px;\\n    overflow: auto;\\n}\\n\\n.students-table{\\n    border-collapse: collapse;\\n    border-spacing: 0;\\n    width: 100%;\\n    border: 1px solid #DCE2E5;\\n    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.15);\\n}\\n\\n.students-table>thead>tr>th{\\n    color: #4a7080;\\n    font-size:12px;\\n    padding: 10px 24px;\\n    background: #f3f6f9;\\n    text-align: left;\\n      width:100px;\\n    border-bottom:1px solid #DCE2E5;\\n}\\n\\n.students-table>tbody>tr>td{\\n    font-size:12px;\\n    padding: 10px 24px;\\n     width:100px;\\n    border-bottom:1px solid #DCE2E5;\\n}\\n\\n.students-table>tbody>tr>td:last-child{\\n  text-align: right;\\n}\\n\\n.students-table>tbody>tr>td>i{\\n    margin: 0 10px 0 0;\\n}\\n\\n.attendance{\\n    font-size: 12px;\\n    padding: 5px 10px;\\n    background: #DCEAEF;\\n    border-radius:10px;\\n    color:#002D3F;\\n}\\n\\n.input-container{\\n    position: relative;\\n}\\n\\n.input-container:after{\\n    content: \\\"\\\\e906\\\";\\n    position: absolute;\\n    top:10px;\\n    right:10px;\\n    font-family: 'classroom';\\n    font-size: 16px;\\n    color: #808d92;\\n}\\n\\n.input-field{\\n    padding: 10px;\\n    border-radius:2px;\\n    box-shadow: none;\\n    border: 1px solid #DCE2E5;\\n    width: 225px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL2FsbC1zdHVkZW50L2FsbC1zdHVkZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsY0FBYztBQUNsQjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixpQkFBaUI7SUFDakIsV0FBVztJQUNYLHlCQUF5QjtJQUN6Qix3Q0FBd0M7QUFDNUM7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO01BQ2QsV0FBVztJQUNiLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7S0FDakIsV0FBVztJQUNaLCtCQUErQjtBQUNuQzs7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsVUFBVTtJQUNWLHdCQUF3QjtJQUN4QixlQUFlO0lBQ2YsY0FBYztBQUNsQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvZGFzaGJvYXJkL2FsbC1zdHVkZW50L2FsbC1zdHVkZW50LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGFibGUtY29udGFpbmVye1xuICAgIG1heC1oZWlnaHQ6IDMwMHB4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uc3R1ZGVudHMtdGFibGV7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICBib3JkZXItc3BhY2luZzogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjRENFMkU1O1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoMCwwLDAsMC4xNSk7XG59XG5cbi5zdHVkZW50cy10YWJsZT50aGVhZD50cj50aHtcbiAgICBjb2xvcjogIzRhNzA4MDtcbiAgICBmb250LXNpemU6MTJweDtcbiAgICBwYWRkaW5nOiAxMHB4IDI0cHg7XG4gICAgYmFja2dyb3VuZDogI2YzZjZmOTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgd2lkdGg6MTAwcHg7XG4gICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0RDRTJFNTtcbn1cblxuLnN0dWRlbnRzLXRhYmxlPnRib2R5PnRyPnRke1xuICAgIGZvbnQtc2l6ZToxMnB4O1xuICAgIHBhZGRpbmc6IDEwcHggMjRweDtcbiAgICAgd2lkdGg6MTAwcHg7XG4gICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0RDRTJFNTtcbn1cbi5zdHVkZW50cy10YWJsZT50Ym9keT50cj50ZDpsYXN0LWNoaWxke1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLnN0dWRlbnRzLXRhYmxlPnRib2R5PnRyPnRkPml7XG4gICAgbWFyZ2luOiAwIDEwcHggMCAwO1xufVxuXG4uYXR0ZW5kYW5jZXtcbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgYmFja2dyb3VuZDogI0RDRUFFRjtcbiAgICBib3JkZXItcmFkaXVzOjEwcHg7XG4gICAgY29sb3I6IzAwMkQzRjtcbn1cblxuLmlucHV0LWNvbnRhaW5lcntcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5pbnB1dC1jb250YWluZXI6YWZ0ZXJ7XG4gICAgY29udGVudDogXCJcXGU5MDZcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOjEwcHg7XG4gICAgcmlnaHQ6MTBweDtcbiAgICBmb250LWZhbWlseTogJ2NsYXNzcm9vbSc7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGNvbG9yOiAjODA4ZDkyO1xufVxuXG4uaW5wdXQtZmllbGR7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXItcmFkaXVzOjJweDtcbiAgICBib3gtc2hhZG93OiBub25lO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQ0UyRTU7XG4gICAgd2lkdGg6IDIyNXB4O1xufSJdfQ== */\"","module.exports = \"<div class=\\\"all-students-container\\\">\\n  <div class=\\\"data-content\\\">\\n    <div class=\\\"section-header\\\">\\n      <div class=\\\"flex align-items-center\\\">\\n        <h6>Fail Students ({{failStudents.length}})</h6>\\n        <a href=\\\"\\\">View all</a>\\n      </div>\\n      <div class=\\\"input-container\\\">\\n        <input type=\\\"text\\\" class=\\\"input-field\\\" placeholder=\\\"Search By Name, ID\\\"\\n          (keyup)=\\\"search('failStudents',$event.target.value)\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"table-container\\\">\\n      <table class=\\\"students-table\\\">\\n        <thead>\\n          <tr>\\n            <th>ID</th>\\n            <th>Severity</th>\\n            <th>Name</th>\\n            <th colspan=\\\"3\\\"></th>\\n          </tr>\\n        </thead>\\n        <tbody *ngIf=\\\"failStudentsSearchResults.length\\\">\\n          <tr *ngFor=\\\"let failedStudent of failStudentsSearchResults\\\">\\n            <td>{{failedStudent.id}}</td>\\n            <td [ngClass]=\\\"{'fail-warning': failedStudent.severity == 'Warning', 'fail-critical': failedStudent.severity == 'Critical'}\\\"><i [ngClass]=\\\"{'cr-warning': failedStudent.severity == 'Warning', 'cr-critical': failedStudent.severity == 'Critical'}\\\"></i>{{failedStudent.severity}}</td>\\n            <td>{{failedStudent.name}}</td>\\n            <td colspan=\\\"3\\\"> <span class=\\\"attendance\\\" *ngIf=\\\"failedStudent.lowAttendance\\\">Low Attendance</span> </td>\\n          </tr>\\n        </tbody>\\n        <tbody *ngIf=\\\"!failStudentsSearchResults.length\\\">\\n          <tr>\\n            <td colspan=\\\"6\\\"><div class=\\\"text-center\\\">No Results Found!!</div> </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n  <div class=\\\"data-content\\\">\\n    <div class=\\\"section-header\\\">\\n      <div class=\\\"flex align-items-center\\\">\\n        <h6>Pass Students ({{passStudents.length}})</h6>\\n        <a href=\\\"\\\">View all</a>\\n      </div>\\n      <div class=\\\"input-container\\\">\\n        <input type=\\\"text\\\" class=\\\"input-field\\\" placeholder=\\\"Search By Name, ID\\\"\\n          (keyup)=\\\"search('passStudents',$event.target.value)\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"table-container\\\">\\n      <table class=\\\"students-table\\\">\\n        <thead>\\n          <tr>\\n            <th>ID</th>\\n            <th>Severity</th>\\n            <th>Name</th>\\n            <th colspan=\\\"3\\\"></th>\\n          </tr>\\n        </thead>\\n        <tbody *ngIf=\\\"passStudentsSearchResults.length\\\">\\n          <tr *ngFor=\\\"let passedStudent of passStudentsSearchResults\\\">\\n            <td>{{passedStudent.id}}</td>\\n            <td><i class=\\\"cr-info\\\"></i>{{passedStudent.severity}}</td>\\n            <td>{{passedStudent.name}}</td>\\n            <td colspan=\\\"3\\\"> <span class=\\\"attendance\\\" *ngIf=\\\"passedStudent.lowAttendance\\\">Low Attendance</span> </td>\\n          </tr>\\n        </tbody>\\n        <tbody *ngIf=\\\"!passStudentsSearchResults.length\\\">\\n            <tr>\\n              <td colspan=\\\"6\\\"><div class=\\\"text-center\\\">No Results Found!!</div></td>\\n            </tr>\\n          </tbody>\\n      </table>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../common/student.model';\nimport { DataService } from '../utility/data.service';\n\n@Component({\n  selector: 'app-all-student',\n  templateUrl: './all-student.component.html',\n  styleUrls: ['./all-student.component.css']\n})\nexport class AllStudentComponent implements OnInit {\n  constructor(private dataService: DataService) { }\n  failStudents: Student[] = [];\n  failStudentsSearchResults: Student[] = [];\n  passStudents: Student[] = [];\n  passStudentsSearchResults: Student[] = [];\n\n  ngOnInit() {\n    this.dataService.allFailStudents$.subscribe(data => {\n      this.failStudents = data;\n      this.failStudentsSearchResults = data;\n    });\n    this.dataService.allPassStudents$.subscribe(data => {\n      this.passStudents = data;\n      this.passStudentsSearchResults = data;\n    })\n  }\n\n  search(record, queryString) {\n    if (record === \"failStudents\") {\n      this.failStudentsSearchResults = this.failStudents.filter((obj) => {\n        return obj.id == queryString || obj.name.toLowerCase().includes(queryString.toLowerCase());\n      });\n    } else {\n      this.passStudentsSearchResults = this.passStudents.filter((obj) => {\n        return obj.id == queryString || obj.name.toLowerCase().includes(queryString.toLowerCase());\n      });\n    }\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { AllStudentsModel } from \"./student.model\";\nimport { HttpClient } from '@angular/common/http';\n\n\n@Injectable()\nexport class DashboardApiService {\n    constructor(private http: HttpClient) {\n    }\n\n    private readonly getAllStudentUrl = `https://my-json-server.typicode.com/uxrtest/demo/db`;\n\n    getAllStudents(): Observable<AllStudentsModel> {\n        const fullUrl = `${this.getAllStudentUrl}`;\n        return this.http.get(fullUrl).pipe(map((response) => {\n            return response as AllStudentsModel\n        }))\n\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { AllStudentComponent } from './all-student/all-student.component';\nimport { FailStudentComponent } from './fail-student/fail-student.component';\nimport { PassStudentComponent } from './pass-student/pass-student.component';\n\nconst routes: Routes = [\n    {\n        path: 'dashboard', component: DashboardComponent, children: [\n            { path: '', pathMatch: 'full', component: AllStudentComponent },\n            { path: 'passtudent', component: PassStudentComponent },\n            { path: 'failstudent', component: FailStudentComponent },\n            { path: 'allstudent', component: AllStudentComponent },\n        ]\n    },\n    { path: '**', redirectTo: 'dashboard' },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class DashboardRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { PassStudentComponent } from './pass-student/pass-student.component';\nimport { FailStudentComponent } from './fail-student/fail-student.component';\nimport { DashboardRoutingModule } from './dashboard-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DashboardApiService } from './common/dashboard-api.service';\nimport { AllStudentComponent } from './all-student/all-student.component';\n\n@NgModule({\n  declarations: [DashboardComponent, PassStudentComponent, FailStudentComponent, AllStudentComponent],\n  imports: [\n    CommonModule,\n    DashboardRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    DashboardApiService\n  ],\n})\nexport class DashboardModule { }\n","module.exports = \".main-content {\\n  padding: 100px 340px 60px 80px;\\n  background: #fff;\\n  height: 100%;\\n  overflow: auto;\\n}\\n.students-data {\\n  border: 1px solid #dce2e5;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: start;\\n          align-items: flex-start;\\n}\\n.sdata {\\n  padding: 16px;\\n  border-right: 1px solid #dce2e5;\\n  width: 33.33%;\\n  height: 140px;\\n  border-bottom: 2px solid transparent;\\n  text-align: center;\\n  position: relative;\\n}\\n.sdata h5 i {\\n    margin: 0 0 0 10px;\\n}\\n.sdata:last-child {\\n  border-right: none;\\n}\\n.sdata.active {\\n  background: #f5fcfc;\\n  border-bottom-color: #00bcbc;\\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.15);\\n}\\n.count-list {\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  margin: 30px 0 0;\\n}\\n.count-list li {\\n  text-align: center;\\n  font-size: 12px;\\n  color: #49535e;\\n  padding: 0 30px;\\n}\\n.count-list li .count {\\n  font-size: 24px;\\n  color: #3b6475;\\n  display: block;\\n  margin: 0 0 10px;\\n}\\n.chart-data {\\n  position: absolute;\\n  top: 50%;\\n  left: 20px;\\n  right: 20px;\\n  z-index: 99;\\n  display: -webkit-box;\\n  display: flex;\\n  -webkit-box-align: center;\\n          align-items: center;\\n  -webkit-box-pack: justify;\\n          justify-content: space-between;\\n  font-size: 12px;\\n}\\n.critical-legend {\\n  color: #dd3131;\\n  font-family: \\\"OpenSans-SemiBold\\\";\\n}\\n.warning-legend {\\n  color: #e29619;\\n  font-family: \\\"OpenSans-SemiBold\\\";\\n}\\n.pass-legend {\\n  color:#78B5D9;\\n  font-family: \\\"OpenSans-SemiBold\\\";\\n}\\n.distinction-legend {\\n  color:#009CDB;\\n  font-family: \\\"OpenSans-SemiBold\\\";\\n}\\n.chart-data li {\\n  width:30%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDhCQUE4QjtFQUM5QixnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLGNBQWM7QUFDaEI7QUFDQTtFQUNFLHlCQUF5QjtFQUN6QixvQkFBYTtFQUFiLGFBQWE7RUFDYix3QkFBdUI7VUFBdkIsdUJBQXVCO0FBQ3pCO0FBRUE7RUFDRSxhQUFhO0VBQ2IsK0JBQStCO0VBQy9CLGFBQWE7RUFDYixhQUFhO0VBQ2Isb0NBQW9DO0VBQ3BDLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7QUFDQTtJQUNJLGtCQUFrQjtBQUN0QjtBQUNBO0VBQ0Usa0JBQWtCO0FBQ3BCO0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsNEJBQTRCO0VBQzVCLDJDQUEyQztBQUM3QztBQUVBO0VBQ0Usb0JBQWE7RUFBYixhQUFhO0VBQ2IseUJBQW1CO1VBQW5CLG1CQUFtQjtFQUNuQix5QkFBOEI7VUFBOUIsOEJBQThCO0VBQzlCLGdCQUFnQjtBQUNsQjtBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixjQUFjO0VBQ2QsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGNBQWM7RUFDZCxjQUFjO0VBQ2QsZ0JBQWdCO0FBQ2xCO0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFVBQVU7RUFDVixXQUFXO0VBQ1gsV0FBVztFQUNYLG9CQUFhO0VBQWIsYUFBYTtFQUNiLHlCQUFtQjtVQUFuQixtQkFBbUI7RUFDbkIseUJBQThCO1VBQTlCLDhCQUE4QjtFQUM5QixlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsZ0NBQWdDO0FBQ2xDO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsZ0NBQWdDO0FBQ2xDO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsZ0NBQWdDO0FBQ2xDO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsZ0NBQWdDO0FBQ2xDO0FBRUE7RUFDRSxTQUFTO0FBQ1giLCJmaWxlIjoic3JjL2FwcC9kYXNoYm9hcmQvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4tY29udGVudCB7XG4gIHBhZGRpbmc6IDEwMHB4IDM0MHB4IDYwcHggODBweDtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogYXV0bztcbn1cbi5zdHVkZW50cy1kYXRhIHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RjZTJlNTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG59XG5cbi5zZGF0YSB7XG4gIHBhZGRpbmc6IDE2cHg7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkY2UyZTU7XG4gIHdpZHRoOiAzMy4zMyU7XG4gIGhlaWdodDogMTQwcHg7XG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG4uc2RhdGEgaDUgaSB7XG4gICAgbWFyZ2luOiAwIDAgMCAxMHB4O1xufVxuLnNkYXRhOmxhc3QtY2hpbGQge1xuICBib3JkZXItcmlnaHQ6IG5vbmU7XG59XG5cbi5zZGF0YS5hY3RpdmUge1xuICBiYWNrZ3JvdW5kOiAjZjVmY2ZjO1xuICBib3JkZXItYm90dG9tLWNvbG9yOiAjMDBiY2JjO1xuICBib3gtc2hhZG93OiAwIDNweCA2cHggMCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xufVxuXG4uY291bnQtbGlzdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgbWFyZ2luOiAzMHB4IDAgMDtcbn1cblxuLmNvdW50LWxpc3QgbGkge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICM0OTUzNWU7XG4gIHBhZGRpbmc6IDAgMzBweDtcbn1cbi5jb3VudC1saXN0IGxpIC5jb3VudCB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgY29sb3I6ICMzYjY0NzU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDAgMCAxMHB4O1xufVxuXG4uY2hhcnQtZGF0YSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDIwcHg7XG4gIHJpZ2h0OiAyMHB4O1xuICB6LWluZGV4OiA5OTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBmb250LXNpemU6IDEycHg7XG59XG4uY3JpdGljYWwtbGVnZW5kIHtcbiAgY29sb3I6ICNkZDMxMzE7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW5TYW5zLVNlbWlCb2xkXCI7XG59XG4ud2FybmluZy1sZWdlbmQge1xuICBjb2xvcjogI2UyOTYxOTtcbiAgZm9udC1mYW1pbHk6IFwiT3BlblNhbnMtU2VtaUJvbGRcIjtcbn1cbi5wYXNzLWxlZ2VuZCB7XG4gIGNvbG9yOiM3OEI1RDk7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW5TYW5zLVNlbWlCb2xkXCI7XG59XG4uZGlzdGluY3Rpb24tbGVnZW5kIHtcbiAgY29sb3I6IzAwOUNEQjtcbiAgZm9udC1mYW1pbHk6IFwiT3BlblNhbnMtU2VtaUJvbGRcIjtcbn1cblxuLmNoYXJ0LWRhdGEgbGkge1xuICB3aWR0aDozMCU7XG59Il19 */\"","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"students-data\\\">\\n    <div class=\\\"all sdata active\\\" [ngClass]=\\\"{'active': (router.url === '/dashboard/allstudent'||router.url === '/dashboard')}\\\" (click)=\\\"navigateToUrl('allstudent')\\\">\\n      <h5 class=\\\"text-center\\\">All Students</h5>\\n      <ul class=\\\"count-list\\\">\\n        <li>\\n          <span class=\\\"count\\\">{{allStudentsData.length}}</span>\\n          Total\\n        </li>\\n        <li>\\n          <span class=\\\"count\\\">{{allFailStudents.length}}</span>\\n          Fail\\n        </li>\\n        <li>\\n          <span class=\\\"count\\\">{{allPassStudents.length}}</span>\\n          Pass\\n        </li>\\n      </ul>\\n    </div>\\n    <div class=\\\"fail sdata\\\" [ngClass]=\\\"{'active': router.url === '/dashboard/failstudent'}\\\" (click)=\\\"navigateToUrl('failstudent')\\\">\\n      <h5 class=\\\"text-center\\\">Fail <i class=\\\"cr-help\\\"></i></h5>\\n      <div id=\\\"fail-chart-container\\\" style=\\\"width:250px; height:120px; position: relative;margin: 0 auto\\\">\\n      \\n      </div>\\n      <ul class=\\\"chart-data\\\">\\n        <li class=\\\"warning-legend\\\">{{studentWarningCount}} Warning</li>\\n        <li class=\\\"critical-legend\\\">{{studentCriticalCount}} Critical</li>\\n      </ul>\\n    </div>\\n    <div class=\\\"pass sdata\\\" [ngClass]=\\\"{'active': router.url === '/dashboard/passtudent'}\\\" (click)=\\\"navigateToUrl('passtudent')\\\">\\n      <h5 class=\\\"text-center\\\">Pass <i class=\\\"cr-help\\\"></i></h5>\\n      <div id=\\\"pass-chart-container\\\" style=\\\"width:250px; height:120px; position: relative;margin: 0 auto\\\"></div>\\n      <ul class=\\\"chart-data\\\">\\n        <li class=\\\"pass-legend\\\">{{studentPassCount}} Other</li>\\n        <li class=\\\"distinction-legend\\\">{{studentDistinctionCount}} Distinction</li>\\n      </ul>\\n    </div>\\n  </div>\\n  <router-outlet></router-outlet>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../common/student.model';\nimport { Router } from \"@angular/router\";\nimport * as Highcharts from 'highcharts';\nimport { DataService } from '../utility/data.service';\nimport { DashboardApiService } from '../common/dashboard-api.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  allStudentsData: Student[] = [];\n  allFailStudents: Student[] = [];\n  studentWarningCount: number = 0;\n  studentCriticalCount: number = 0;\n  allPassStudents: Student[] = [];\n  studentDistinctionCount: number = 0;\n  studentPassCount: number = 0;\n  public failDonutOptions: any = {\n    chart: {\n      backgroundColor: 'transparent',\n      margin: [0, 0, 0, 0],\n      spacingTop: 0,\n                spacingBottom: 0,\n                spacingLeft: 0,\n                spacingRight: 0,\n    },\n    colors:[\"#DD3131\",\"#E29619\"],\n    credits: {\n      enabled: false\n    },\n    title: {\n      text: \"\",\n      align: 'center',\n      verticalAlign: 'middle',\n      y: 0,\n     style: {'color':'#3B6475', 'fontSize': '24px', 'font-family': 'OpenSans-Regular'}\n    },\n    tooltip: {\n      enabled: false,\n    },\n    plotOptions: {\n      pie: {\n        states: {\n          hover: {\n            enabled: false\n          },\n          inactive: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false,\n          // \"softConnector\": false, \"y\": 0,\n          // 'distance': 10,\n        },\n        center: ['50%', '40%'],\n        size: '70%'\n      }\n    },\n    series: [{\n      type: 'pie',\n      innerSize: '80%',\n      data: [0, 0]\n    }]\n  };\n  public passDonutOptions: any = {\n    chart: {\n      backgroundColor: 'transparent',\n      margin: [0, 0, 0, 0],\n      spacingTop: 0,\n                spacingBottom: 0,\n                spacingLeft: 0,\n                spacingRight: 0,\n    },\n    colors:[\"#009CDB\",\"#78B5D9\"],\n    credits: {\n      enabled: false\n    },\n    title: {\n      text: \"\",\n      align: 'center',\n      verticalAlign: 'middle',\n      y: 0,\n     style: {'color':'#3B6475', 'fontSize': '24px', 'font-family': 'OpenSans-Regular'}\n    },\n    tooltip: {\n      enabled: false,\n    },\n    plotOptions: {\n      pie: {\n        states: {\n          hover: {\n            enabled: false\n          },\n          inactive: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false,\n          // \"softConnector\": false, \"y\": 0,\n          // 'distance': 10,\n        },\n        center: ['50%', '40%'],\n        size: '70%'\n      }\n    },\n    series: [{\n      type: 'pie',\n      innerSize: '80%',\n      data: [0, 0]\n    }]\n  };\n  constructor(private apiService: DashboardApiService, private dataService: DataService, private router: Router) {\n\n  }\n\n  ngOnInit() {\n    this.apiService.getAllStudents().subscribe(data => {\n      this.allStudentsData = data.students;\n      this.dataService.allStudentsData$.next(this.allStudentsData);\n      this.getFailStudent();\n      this.getLowAttendance();\n    })\n  }\n\n  getFailStudent() {\n    this.allStudentsData.map(student => {\n      let counter = 0;\n      for (let property in student.marks) {\n        if (student.marks.hasOwnProperty(property)) {\n          if (student.marks[property] < 35) {\n            counter++;\n          }\n        }\n      }\n      if (counter === 1) {\n        student.severity = \"Warning\";\n        this.studentWarningCount++;\n        this.allFailStudents.push(student);\n      } else if (counter > 1) {\n        student.severity = \"Critical\";\n        this.studentCriticalCount++;\n        this.allFailStudents.push(student);\n      }\n    });\n    this.failDonutOptions.title.text = this.allFailStudents.length;\n    this.failDonutOptions.series[0].data = [this.studentCriticalCount,this.studentWarningCount]\n    Highcharts.chart('fail-chart-container', this.failDonutOptions);\n    this.dataService.allFailStudents$.next(this.allFailStudents);\n    this.getPassStudent();\n  }\n\n  getPassStudent() {\n    let allUniquePassStudent: Student[] = this.allStudentsData.filter((obj) => {\n      return !this.allFailStudents.some((obj2) => {\n        return obj.id == obj2.id;\n      });\n    });\n    allUniquePassStudent.map(passStudent => {\n      let total = 0;\n      for (let subject in passStudent.marks) {\n        if (passStudent.marks.hasOwnProperty(subject)) {\n          total += passStudent.marks[subject];\n        }\n      }\n      if ((total / Object.keys(passStudent.marks).length) > 75) {\n        passStudent.severity = \"Distinction\";\n        this.studentDistinctionCount++;\n      } else {\n        passStudent.severity = \"Pass\";\n        this.studentPassCount++;\n      }\n    });\n    this.allPassStudents = [...allUniquePassStudent];\n    this.dataService.allPassStudents$.next(this.allPassStudents);\n    this.passDonutOptions.title.text = this.allPassStudents.length;\n    this.passDonutOptions.series[0].data = [this.studentDistinctionCount,this.studentPassCount]\n    Highcharts.chart('pass-chart-container', this.passDonutOptions);\n  }\n\n  getLowAttendance() {\n    this.allStudentsData.map(student => {\n      let attendence = (Object.keys(student.attendance).map(key => Number(student.attendance[key].replace(\"%\", \"\"))).reduce((previous, current) => previous + current) / Object.keys(student.attendance).length);\n      if (attendence < 60) {\n        student[\"lowAttendance\"] = String(attendence);\n      }\n    })\n  }\n\n  navigateToUrl(path: String) {\n    let url = `/dashboard/${path}`\n    this.router.navigateByUrl(url);\n  }\n\n}\n","module.exports = \".table-container{\\n    height: calc(100% - 220px);\\n    overflow: auto;\\n}\\n\\n.students-table{\\n    border-collapse: collapse;\\n    border-spacing: 0;\\n    width: 100%;\\n    border: 1px solid #DCE2E5;\\n    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.15);\\n}\\n\\n.students-table>thead>tr>th{\\n    color: #4a7080;\\n    font-size:12px;\\n   padding: 10px 24px;\\n    background: #f3f6f9;\\n    text-align: left;\\n    border-bottom:1px solid #DCE2E5;\\n     width:100px;\\n}\\n\\n.students-table>tbody>tr>td{\\n    font-size:12px;\\n     padding: 10px 24px;\\n     width:100px;\\n    border-bottom:1px solid #DCE2E5;\\n}\\n\\n.students-table>tbody>tr>td:last-child{\\n  text-align: right;\\n}\\n\\n.students-table>tbody>tr>td>i{\\n    margin: 0 10px 0 0;\\n}\\n\\n.attendance{\\n    font-size: 12px;\\n    padding: 5px 10px;\\n    background: #DCEAEF;\\n    border-radius:10px;\\n    color:#002D3F;\\n\\n}\\n\\n.input-container{\\n    position: relative;\\n}\\n\\n.input-container:after{\\n    content: \\\"\\\\e906\\\";\\n    position: absolute;\\n    top:10px;\\n    right:10px;\\n    font-family: 'classroom';\\n    font-size: 16px;\\n    color: #808d92;\\n}\\n\\n.input-field{\\n    padding: 10px;\\n    border-radius:2px;\\n    box-shadow: none;\\n    border: 1px solid #DCE2E5;\\n    width: 225px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL2ZhaWwtc3R1ZGVudC9mYWlsLXN0dWRlbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLDBCQUEwQjtJQUMxQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLHdDQUF3QztBQUM1Qzs7QUFFQTtJQUNJLGNBQWM7SUFDZCxjQUFjO0dBQ2Ysa0JBQWtCO0lBQ2pCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsK0JBQStCO0tBQzlCLFdBQVc7QUFDaEI7O0FBRUE7SUFDSSxjQUFjO0tBQ2Isa0JBQWtCO0tBQ2xCLFdBQVc7SUFDWiwrQkFBK0I7QUFDbkM7O0FBQ0E7RUFDRSxpQkFBaUI7QUFDbkI7O0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7O0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsYUFBYTs7QUFFakI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLFFBQVE7SUFDUixVQUFVO0lBQ1Ysd0JBQXdCO0lBQ3hCLGVBQWU7SUFDZixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9kYXNoYm9hcmQvZmFpbC1zdHVkZW50L2ZhaWwtc3R1ZGVudC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlLWNvbnRhaW5lcntcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDIyMHB4KTtcbiAgICBvdmVyZmxvdzogYXV0bztcbn1cblxuLnN0dWRlbnRzLXRhYmxle1xuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI0RDRTJFNTtcbiAgICBib3gtc2hhZG93OiAwIDJweCA2cHggMCByZ2JhKDAsMCwwLDAuMTUpO1xufVxuXG4uc3R1ZGVudHMtdGFibGU+dGhlYWQ+dHI+dGh7XG4gICAgY29sb3I6ICM0YTcwODA7XG4gICAgZm9udC1zaXplOjEycHg7XG4gICBwYWRkaW5nOiAxMHB4IDI0cHg7XG4gICAgYmFja2dyb3VuZDogI2YzZjZmOTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICNEQ0UyRTU7XG4gICAgIHdpZHRoOjEwMHB4O1xufVxuXG4uc3R1ZGVudHMtdGFibGU+dGJvZHk+dHI+dGR7XG4gICAgZm9udC1zaXplOjEycHg7XG4gICAgIHBhZGRpbmc6IDEwcHggMjRweDtcbiAgICAgd2lkdGg6MTAwcHg7XG4gICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0RDRTJFNTtcbn1cbi5zdHVkZW50cy10YWJsZT50Ym9keT50cj50ZDpsYXN0LWNoaWxke1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cbi5zdHVkZW50cy10YWJsZT50Ym9keT50cj50ZD5pe1xuICAgIG1hcmdpbjogMCAxMHB4IDAgMDtcbn1cbi5hdHRlbmRhbmNle1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICBiYWNrZ3JvdW5kOiAjRENFQUVGO1xuICAgIGJvcmRlci1yYWRpdXM6MTBweDtcbiAgICBjb2xvcjojMDAyRDNGO1xuXG59XG5cbi5pbnB1dC1jb250YWluZXJ7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uaW5wdXQtY29udGFpbmVyOmFmdGVye1xuICAgIGNvbnRlbnQ6IFwiXFxlOTA2XCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDoxMHB4O1xuICAgIHJpZ2h0OjEwcHg7XG4gICAgZm9udC1mYW1pbHk6ICdjbGFzc3Jvb20nO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBjb2xvcjogIzgwOGQ5Mjtcbn1cblxuLmlucHV0LWZpZWxke1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgYm9yZGVyLXJhZGl1czoycHg7XG4gICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjRENFMkU1O1xuICAgIHdpZHRoOiAyMjVweDtcbn0iXX0= */\"","module.exports = \"<div class=\\\"data-content\\\">\\n    <div class=\\\"section-header\\\">\\n      <div class=\\\"flex align-items-center\\\">\\n        <h5>Fail Students ({{failStudents.length}})</h5>\\n        <a href=\\\"\\\">View all</a>\\n      </div>\\n      <div class=\\\"input-container\\\">\\n        <input type=\\\"text\\\" class=\\\"input-field\\\" placeholder=\\\"Search By Name, ID\\\"\\n          (keyup)=\\\"search($event.target.value)\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"table-container\\\">\\n      <table class=\\\"students-table\\\">\\n        <thead>\\n          <tr>\\n            <th>ID</th>\\n            <th>Severity</th>\\n            <th>Name</th>\\n            <th colspan=\\\"3\\\"></th>\\n          </tr>\\n        </thead>\\n        <tbody *ngIf=\\\"failStudentsSearchResults.length\\\">\\n          <tr *ngFor=\\\"let failedStudent of failStudentsSearchResults\\\">\\n            <td>{{failedStudent.id}}</td>\\n            <td [ngClass]=\\\"{'fail-warning': failedStudent.severity == 'Warning', 'fail-critical': failedStudent.severity == 'Critical'}\\\"><i [ngClass]=\\\"{'cr-warning': failedStudent.severity == 'Warning', 'cr-critical': failedStudent.severity == 'Critical'}\\\"></i>{{failedStudent.severity}}</td>\\n            <td>{{failedStudent.name}}</td>\\n            <td colspan=\\\"3\\\"> <span class=\\\"attendance\\\" *ngIf=\\\"failedStudent.lowAttendance\\\">Low Attendance</span> </td>\\n          </tr>\\n        </tbody>\\n        <tbody *ngIf=\\\"!failStudentsSearchResults.length\\\">\\n          <tr>\\n            <td colspan=\\\"6\\\"><div class=\\\"text-center\\\">No Results Found!!</div> </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../common/student.model';\nimport { DataService } from '../utility/data.service';\n\n@Component({\n  selector: 'app-fail-student',\n  templateUrl: './fail-student.component.html',\n  styleUrls: ['./fail-student.component.css']\n})\nexport class FailStudentComponent implements OnInit {\n\n  constructor(private dataService: DataService) { }\n  failStudents: Student[] = [];\n  failStudentsSearchResults: Student[] = [];\n\n  ngOnInit() {\n    this.dataService.allFailStudents$.subscribe(data => {\n      this.failStudents = data;\n      this.failStudentsSearchResults = data;\n    });\n  }\n  search(queryString) {\n    this.failStudentsSearchResults = this.failStudents.filter((obj) => {\n      return obj.id == queryString || obj.name.toLowerCase().includes(queryString.toLowerCase());\n    });\n  }\n\n}\n","module.exports = \".table-container{\\n    height: calc(100% - 220px);\\n    overflow: auto;\\n}\\n\\n.students-table{\\n    border-collapse: collapse;\\n    border-spacing: 0;\\n    width: 100%;\\n    border: 1px solid #DCE2E5;\\n    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.15);\\n}\\n\\n.students-table>thead>tr>th{\\n    color: #4a7080;\\n    font-size:12px;\\n    padding: 10px 24px;\\n    background: #f3f6f9;\\n    text-align: left;\\n    width:100px;\\n    border-bottom:1px solid #DCE2E5;\\n}\\n\\n.students-table>tbody>tr>td{\\n    font-size:12px;\\n     padding: 10px 24px;\\n    width: 100px;\\n    border-bottom:1px solid #DCE2E5;\\n}\\n\\n.students-table>tbody>tr>td:last-child{\\n  text-align: right;\\n}\\n\\n.students-table>tbody>tr>td>i{\\n    margin: 0 10px 0 0;\\n}\\n\\n.attendance{\\n    font-size: 12px;\\n    padding: 5px 10px;\\n    background: #DCEAEF;\\n    border-radius:10px;\\n    color:#002D3F;\\n}\\n\\n.input-container{\\n    position: relative;\\n}\\n\\n.input-container:after{\\n    content: \\\"\\\\e906\\\";\\n    position: absolute;\\n    top:10px;\\n    right:10px;\\n    font-family: 'classroom';\\n    font-size: 16px;\\n    color: #808d92;\\n}\\n\\n.input-field{\\n    padding: 10px;\\n    border-radius:2px;\\n    box-shadow: none;\\n    border: 1px solid #DCE2E5;\\n    width: 225px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGFzaGJvYXJkL3Bhc3Mtc3R1ZGVudC9wYXNzLXN0dWRlbnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLDBCQUEwQjtJQUMxQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLHdDQUF3QztBQUM1Qzs7QUFFQTtJQUNJLGNBQWM7SUFDZCxjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLGNBQWM7S0FDYixrQkFBa0I7SUFDbkIsWUFBWTtJQUNaLCtCQUErQjtBQUNuQzs7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFDQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixRQUFRO0lBQ1IsVUFBVTtJQUNWLHdCQUF3QjtJQUN4QixlQUFlO0lBQ2YsY0FBYztBQUNsQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvZGFzaGJvYXJkL3Bhc3Mtc3R1ZGVudC9wYXNzLXN0dWRlbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50YWJsZS1jb250YWluZXJ7XG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAyMjBweCk7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5zdHVkZW50cy10YWJsZXtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNEQ0UyRTU7XG4gICAgYm94LXNoYWRvdzogMCAycHggNnB4IDAgcmdiYSgwLDAsMCwwLjE1KTtcbn1cblxuLnN0dWRlbnRzLXRhYmxlPnRoZWFkPnRyPnRoe1xuICAgIGNvbG9yOiAjNGE3MDgwO1xuICAgIGZvbnQtc2l6ZToxMnB4O1xuICAgIHBhZGRpbmc6IDEwcHggMjRweDtcbiAgICBiYWNrZ3JvdW5kOiAjZjNmNmY5O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgd2lkdGg6MTAwcHg7XG4gICAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI0RDRTJFNTtcbn1cblxuLnN0dWRlbnRzLXRhYmxlPnRib2R5PnRyPnRke1xuICAgIGZvbnQtc2l6ZToxMnB4O1xuICAgICBwYWRkaW5nOiAxMHB4IDI0cHg7XG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICNEQ0UyRTU7XG59XG4uc3R1ZGVudHMtdGFibGU+dGJvZHk+dHI+dGQ6bGFzdC1jaGlsZHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG4uc3R1ZGVudHMtdGFibGU+dGJvZHk+dHI+dGQ+aXtcbiAgICBtYXJnaW46IDAgMTBweCAwIDA7XG59XG5cbi5hdHRlbmRhbmNle1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICBiYWNrZ3JvdW5kOiAjRENFQUVGO1xuICAgIGJvcmRlci1yYWRpdXM6MTBweDtcbiAgICBjb2xvcjojMDAyRDNGO1xufVxuXG4uaW5wdXQtY29udGFpbmVye1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLmlucHV0LWNvbnRhaW5lcjphZnRlcntcbiAgICBjb250ZW50OiBcIlxcZTkwNlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6MTBweDtcbiAgICByaWdodDoxMHB4O1xuICAgIGZvbnQtZmFtaWx5OiAnY2xhc3Nyb29tJztcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICM4MDhkOTI7XG59XG5cbi5pbnB1dC1maWVsZHtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6MnB4O1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI0RDRTJFNTtcbiAgICB3aWR0aDogMjI1cHg7XG59Il19 */\"","module.exports = \"<div class=\\\"data-content\\\">\\n    <div class=\\\"section-header\\\">\\n      <div class=\\\"flex align-items-center\\\">\\n        <h5>Pass Students ({{passStudents.length}})</h5>\\n        <a href=\\\"\\\">View all</a>\\n      </div>\\n      <div class=\\\"input-container\\\">\\n        <input type=\\\"text\\\" class=\\\"input-field\\\" placeholder=\\\"Search By Name, ID\\\"\\n          (keyup)=\\\"search($event.target.value)\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"table-container\\\">\\n      <table class=\\\"students-table\\\">\\n        <thead>\\n          <tr>\\n            <th>ID</th>\\n            <th>Severity</th>\\n            <th>Name</th>\\n            <th colspan=\\\"3\\\"></th>\\n          </tr>\\n        </thead>\\n        <tbody *ngIf=\\\"passStudentsSearchResults.length\\\">\\n          <tr *ngFor=\\\"let passedStudent of passStudentsSearchResults\\\">\\n            <td>{{passedStudent.id}}</td>\\n            <td><i class=\\\"cr-info\\\"></i>{{passedStudent.severity}}</td>\\n            <td>{{passedStudent.name}}</td>\\n            <td colspan=\\\"3\\\"> <span class=\\\"attendance\\\" *ngIf=\\\"passedStudent.lowAttendance\\\">Low Attendance</span> </td>\\n          </tr>\\n        </tbody>\\n        <tbody *ngIf=\\\"!passStudentsSearchResults.length\\\">\\n            <tr>\\n              <td colspan=\\\"6\\\"><div class=\\\"text-center\\\">No Results Found!!</div> </td>\\n            </tr>\\n          </tbody>\\n      </table>\\n    </div>\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Student } from '../common/student.model';\nimport { DataService } from '../utility/data.service';\n\n@Component({\n  selector: 'app-pass-student',\n  templateUrl: './pass-student.component.html',\n  styleUrls: ['./pass-student.component.css']\n})\nexport class PassStudentComponent implements OnInit {\n\n  constructor(private dataService: DataService) { }\n  passStudents: Student[] = [];\n  passStudentsSearchResults: Student[] = [];\n  ngOnInit() {\n    this.dataService.allPassStudents$.subscribe(data => {\n      this.passStudents = data;\n      this.passStudentsSearchResults = data;\n    })\n  }\n  search(queryString) {\n    this.passStudentsSearchResults = this.passStudents.filter((obj) => {\n      return obj.id == queryString || obj.name.toLowerCase().includes(queryString.toLowerCase());\n    });\n  }\n\n}\n"],"sourceRoot":""}